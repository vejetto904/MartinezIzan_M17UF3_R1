//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameInputs
{
    public partial class @Inputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Inputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Controles"",
            ""id"": ""230b2a47-1f76-4487-9377-68094f0c07e5"",
            ""actions"": [
                {
                    ""name"": ""Movimiento"",
                    ""type"": ""PassThrough"",
                    ""id"": ""79739628-b245-4747-a746-e5abef07311b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""fc67db9a-0bd3-4159-a6ef-535818592ce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b392897f-f2ca-4402-b86f-0bdee12999f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""ef6a58b9-b184-4c3c-832e-4d6c8ffdd577"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamAim"",
                    ""type"": ""Button"",
                    ""id"": ""7c5b49f8-de87-43cd-86cb-3f62dadb668d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamChange"",
                    ""type"": ""Button"",
                    ""id"": ""3f1bd6a0-7470-461c-bf98-4e927c2bfb5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpInv"",
                    ""type"": ""Button"",
                    ""id"": ""d19528e9-d24f-4db7-b50c-088add2a7b56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1b15ea64-dd57-4e9e-bceb-06a5dd47d5c1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""64ee995c-46da-41dc-adeb-4eedf41dcb2b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""334324c3-22d2-488d-b109-967906a5c704"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e08f6e4-23d6-487d-8a10-b0b4e30ac3e2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ee48ba98-2f24-4602-bc33-416f1a0c138e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5eddff1c-2e83-45e7-be11-4f252b869699"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03ba3f51-23e5-4bf7-943c-98de840b532b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7969469a-ef58-4e0a-b200-b7edb67ffefe"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd5b5fe7-f35d-4129-a8d4-2df85864ce8a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f869b10-19f2-4dab-bc42-dcb72dbb2927"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ea68491-5bea-46b1-be80-680cd69930c1"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpInv"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Controles
            m_Controles = asset.FindActionMap("Controles", throwIfNotFound: true);
            m_Controles_Movimiento = m_Controles.FindAction("Movimiento", throwIfNotFound: true);
            m_Controles_Run = m_Controles.FindAction("Run", throwIfNotFound: true);
            m_Controles_Jump = m_Controles.FindAction("Jump", throwIfNotFound: true);
            m_Controles_Crouch = m_Controles.FindAction("Crouch", throwIfNotFound: true);
            m_Controles_CamAim = m_Controles.FindAction("CamAim", throwIfNotFound: true);
            m_Controles_CamChange = m_Controles.FindAction("CamChange", throwIfNotFound: true);
            m_Controles_OpInv = m_Controles.FindAction("OpInv", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Controles
        private readonly InputActionMap m_Controles;
        private List<IControlesActions> m_ControlesActionsCallbackInterfaces = new List<IControlesActions>();
        private readonly InputAction m_Controles_Movimiento;
        private readonly InputAction m_Controles_Run;
        private readonly InputAction m_Controles_Jump;
        private readonly InputAction m_Controles_Crouch;
        private readonly InputAction m_Controles_CamAim;
        private readonly InputAction m_Controles_CamChange;
        private readonly InputAction m_Controles_OpInv;
        public struct ControlesActions
        {
            private @Inputs m_Wrapper;
            public ControlesActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movimiento => m_Wrapper.m_Controles_Movimiento;
            public InputAction @Run => m_Wrapper.m_Controles_Run;
            public InputAction @Jump => m_Wrapper.m_Controles_Jump;
            public InputAction @Crouch => m_Wrapper.m_Controles_Crouch;
            public InputAction @CamAim => m_Wrapper.m_Controles_CamAim;
            public InputAction @CamChange => m_Wrapper.m_Controles_CamChange;
            public InputAction @OpInv => m_Wrapper.m_Controles_OpInv;
            public InputActionMap Get() { return m_Wrapper.m_Controles; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControlesActions set) { return set.Get(); }
            public void AddCallbacks(IControlesActions instance)
            {
                if (instance == null || m_Wrapper.m_ControlesActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ControlesActionsCallbackInterfaces.Add(instance);
                @Movimiento.started += instance.OnMovimiento;
                @Movimiento.performed += instance.OnMovimiento;
                @Movimiento.canceled += instance.OnMovimiento;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @CamAim.started += instance.OnCamAim;
                @CamAim.performed += instance.OnCamAim;
                @CamAim.canceled += instance.OnCamAim;
                @CamChange.started += instance.OnCamChange;
                @CamChange.performed += instance.OnCamChange;
                @CamChange.canceled += instance.OnCamChange;
                @OpInv.started += instance.OnOpInv;
                @OpInv.performed += instance.OnOpInv;
                @OpInv.canceled += instance.OnOpInv;
            }

            private void UnregisterCallbacks(IControlesActions instance)
            {
                @Movimiento.started -= instance.OnMovimiento;
                @Movimiento.performed -= instance.OnMovimiento;
                @Movimiento.canceled -= instance.OnMovimiento;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @CamAim.started -= instance.OnCamAim;
                @CamAim.performed -= instance.OnCamAim;
                @CamAim.canceled -= instance.OnCamAim;
                @CamChange.started -= instance.OnCamChange;
                @CamChange.performed -= instance.OnCamChange;
                @CamChange.canceled -= instance.OnCamChange;
                @OpInv.started -= instance.OnOpInv;
                @OpInv.performed -= instance.OnOpInv;
                @OpInv.canceled -= instance.OnOpInv;
            }

            public void RemoveCallbacks(IControlesActions instance)
            {
                if (m_Wrapper.m_ControlesActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IControlesActions instance)
            {
                foreach (var item in m_Wrapper.m_ControlesActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ControlesActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ControlesActions @Controles => new ControlesActions(this);
        public interface IControlesActions
        {
            void OnMovimiento(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnCamAim(InputAction.CallbackContext context);
            void OnCamChange(InputAction.CallbackContext context);
            void OnOpInv(InputAction.CallbackContext context);
        }
    }
}
